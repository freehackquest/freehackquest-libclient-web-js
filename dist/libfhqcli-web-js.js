// This file was automatically generated by fhq-server (v0.2.24), date: 10 Dec 2019
window.fhq = window.fhq || (function() { 
    var self = {};
    self.appName = 'fhq-server';
    self.appVersion = '0.2.24';
    self.appBuildDate = '10 Dec 2019';
    var _lastm = 0;
    var _listeners = {};
    var _connectionState = '?';
    var _tokenValue = '';
    var _events = {
        'server': [],
        'notify': [],
        'chat': [],
        'connected': [],
        'reconnecting': [],
        'disconnected': [],
        'broken': [],
        'userdata': [],
    };
    function _lm() { _lastm++; return 'm' + _lastm; };
    console.warn('fhq (v0.2.24)');
    self.promise = function() {
        return {
            completed: false, failed: false, successed: false, 
            done: function(callback) {
                this.done_callback = callback;
                if (this.completed && typeof this.done_callback === 'function' && this.successed) {
                    this.done_callback.apply(this, this.result_arguments);
                }
                return this;
            },
            fail: function(callback) {
                this.fail_callback = callback;
                if (this.completed && typeof this.fail_callback === 'function' && this.failed) {
                    this.fail_callback.apply(this, this.error_arguments);
                }
                return this;
            },
            resolve: function() {
                if (!this.completed) {
                    this.result_arguments = arguments; // [];
                    if (typeof this.done_callback === 'function') {
                        this.done_callback.apply(this, this.result_arguments);
                    }
                }
                this.successed = true;
                this.completed = true;
            },
            reject: function() {
                if (!this.completed) {
                    this.error_arguments = arguments;
                    if (typeof this.fail_callback === 'function') {
                        this.fail_callback.apply(this, this.error_arguments);
                    }
                }
                this.failed = true;
                this.completed = true;
            }
        }; // end of promise
    };
    self.waitAllPromises = function(arr_promise) {
        var p = self.promise();
        var max_len = arr_promise.length;
        var result = [];
        function cmpl(r) {
            result.push(r);
            if (result.length == max_len) {
                p.resolve(result);
            }
        };
        for (var i in arr_promise) {
            arr_promise[i].done(cmpl).fail(cmpl);
        }
        return p;
    };
    self.setToken = function(token) {
        var date = new Date( new Date().getTime() + (7 * 24 * 60 * 60 * 1000) ); // cookie on week
        document.cookie = 'fhqtoken=' + encodeURIComponent(token) + '; path=/; expires='+date.toUTCString();
    }
    self.removeToken = function() {
        _tokenValue = '';        document.cookie = 'fhqtoken=; path=/;';
    }
    self.getToken = function() {
        var matches = document.cookie.match(new RegExp(
            '(?:^|; )' + 'fhqtoken'.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'
        ));
        return matches ? decodeURIComponent(matches[1]) : '';
    }
    _tokenValue = self.getToken();
    self.bind = function(name, f) { _events[name].push(f); }
    self.unbind = function(name) { _events[name] = []; }
    function _call(name, data) {
        function __call(f, data) { setTimeout(function() { f(data) },1)}        for (var i = 0; i < _events[name].length; i++) {
            __call(_events[name][i], data);
        }
    }
    self.bind('server', function(response) { 
       console.warn('All: ', response);
       if (response.app != self.appName) {
           console.error('AppName: ' + response.app + ', but expected ' + self.appName);
       }
       if (response.version != self.appVersion) {
           console.error('AppVersion: ' + response.version + ', but expected ' + self.appVersion);
       }
    }); 
    self.handleCommand = function(response) {
       var lstn = _listeners[response.m];
       if (lstn) {
           setTimeout(function() {
               if (response['error']) {
                   lstn.reject(response);
               } else {
                   lstn.resolve(response);
               }
               delete _listeners[response.m];
           },1);
       } else if (_events[response.cmd]) {
           _call(response.cmd, response);       } else {
           console.error('Not found handler for [' + response.cmd + '/' + response.m + ']');
       }
   };
   self.send = function(obj, def) {
       obj.m = obj.m || _lm();
       _listeners[obj.m] = def || self.promise();
       try {
           if (self.socket.readyState == 0) {
               setTimeout(function() {
                   self.send(obj, _listeners[obj.m]);
               },1000);
           } else {
               self.socket.send(JSON.stringify(obj));
           }
       } catch(e) {
           console.error(e);
       }
       return _listeners[obj.m];
    }
    self.init = function(initParams) {
        if (!initParams.baseUrl) console.error('Expected baseUrl on initParams');
        self.socket = new WebSocket(initParams.baseUrl);
        self.socket.onopen = function() {
           console.log('WS Opened');
           _call('connected', {});
           if (_tokenValue != '') self.token();
        };
        self.socket.onclose = function(event) {
           console.log('Closed');
           if (event.wasClean) {
               _call('disconnected', {});
           } else {
               _call('broken', {});
               setTimeout(function() {
                   _call('reconnecting', {});
                   self.init(initParams);
               }, 10000);
             // Try reconnect after 5 sec
           }
           console.log('Code: ' + event.code + ' Reason: ' + event.reason);
       };
       self.socket.onmessage = function(event) {
           // console.log('Received: ' + event.data);
           try {
               var response = JSON.parse(event.data);
               self.handleCommand(response);
           } catch(e) {
               console.error(e);
           }
           
       };
       self.socket.onerror = function(error) {
           console.log('Error: ' + error.message);
       };
    }
    self.deinit = function(initParams) {
       self.removeToken();
       self.socket.close();
    }
   self.userProfile = {bInitUserProfile: false}
   self.updateUserProfileAsync = function() {
       setTimeout(function() {
           self.user().done(function(r) {
               self.userProfile.bInitUserProfile == true;
               self.userProfile.university = r.data.university;
               self.userProfile.country = r.data.country;
               self.userProfile.city = r.data.city;
               self.userinfo = {};
               self.userinfo.id = r.data.id;
               self.userinfo.nick = r.data.nick;
               self.userinfo.email = r.data.email;
               self.userinfo.role = r.data.role;
               self.userinfo.logo = r.data.logo;
               _call('userdata', r.data);
           }).fail(function() {
               self.removeToken();
               _call('userdata', {});
           });
       },10);
   }
    self.addhint = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * questid - integer, required (quest id) 
       // * hint - string, required (hint text) 
        params = params || {};
        params.cmd = 'addhint';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
        if (params['hint'] == undefined) {
             console.error('Parameter "hint" expected (lib)');
        }
         return self.send(params);
    }

    self.answerlist = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * page - integer, required (Number of page) 
       // * onpage - integer, required (How much rows on page) 
       // * questid - integer, optional (Filter for questid) 
       // * userid - integer, optional (Filter for userid) 
        params = params || {};
        params.cmd = 'answerlist';
        if (params['page'] == undefined) {
             console.error('Parameter "page" expected (lib)');
        }
        if (params['onpage'] == undefined) {
             console.error('Parameter "onpage" expected (lib)');
        }
         return self.send(params);
    }

    self.chat_latest_messages = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'chat_latest_messages';
         return self.send(params);
    }

    self.chat_send_message = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * type - string, required (Type) 
       // * message - string, required (Message) 
        params = params || {};
        params.cmd = 'chat_send_message';
        if (params['type'] == undefined) {
             console.error('Parameter "type" expected (lib)');
        }
        if (params['message'] == undefined) {
             console.error('Parameter "message" expected (lib)');
        }
         return self.send(params);
    }

    self.chats_add_to_black_list = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_add_to_black_list';
         return self.send(params);
    }

    self.chats_add_to_chat = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_add_to_chat';
         return self.send(params);
    }

    self.chats_change_owner = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_change_owner';
         return self.send(params);
    }

    self.chats_create_group_chat = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_create_group_chat';
         return self.send(params);
    }

    self.chats_delete_from_black_list = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_delete_from_black_list';
         return self.send(params);
    }

    self.chats_delete_from_chat = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_delete_from_chat';
         return self.send(params);
    }

    self.chats_dialogs_list = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_dialogs_list';
         return self.send(params);
    }

    self.chats_message_delete = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_message_delete';
         return self.send(params);
    }

    self.chats_message_edit = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_message_edit';
         return self.send(params);
    }

    self.chats_message_read = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.24
        params = params || {};
        params.cmd = 'chats_message_read';
         return self.send(params);
    }

    self.classbook_add_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * parentid - integer, required (pareintid for classbook article) 
       // * name - string, required (name of article) 
       // * content - string, required (content of article) 
       // * uuid - string, optional (uuid of article) 
       // * ordered - integer, optional (order of article) 
        params = params || {};
        params.cmd = 'classbook_add_record';
        if (params['parentid'] == undefined) {
             console.error('Parameter "parentid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['content'] == undefined) {
             console.error('Parameter "content" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_delete_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (id for classbook article) 
        params = params || {};
        params.cmd = 'classbook_delete_record';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_export = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * output - string, required (The output file format) 
       // * lang - string, required (The output file format) 
       // * zip - boolean, optional (Zipping the output) 
        params = params || {};
        params.cmd = 'classbook_export';
        if (params['output'] == undefined) {
             console.error('Parameter "output" expected (lib)');
        }
        if (params['lang'] == undefined) {
             console.error('Parameter "lang" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_info = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (id for the classbook article) 
       // * lang - string, optional (Set lang for the article) 
        params = params || {};
        params.cmd = 'classbook_info';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_list = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * parentid - integer, required (parentid for classbook articles) 
       // * lang - string, optional (lang for classbook articles) 
       // * search - string, optional (Search string for classbook articles) 
        params = params || {};
        params.cmd = 'classbook_list';
        if (params['parentid'] == undefined) {
             console.error('Parameter "parentid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_localization_add_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (Classbookid for article localization) 
       // * lang - string, required (Language) 
       // * name - string, required (Article name) 
       // * content - string, required (The content of the article) 
        params = params || {};
        params.cmd = 'classbook_localization_add_record';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
        if (params['lang'] == undefined) {
             console.error('Parameter "lang" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['content'] == undefined) {
             console.error('Parameter "content" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_localization_delete_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbook_localizationid - integer, required (Localization id) 
        params = params || {};
        params.cmd = 'classbook_localization_delete_record';
        if (params['classbook_localizationid'] == undefined) {
             console.error('Parameter "classbook_localizationid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_localization_info = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbook_localizationid - integer, required (Localization id) 
        params = params || {};
        params.cmd = 'classbook_localization_info';
        if (params['classbook_localizationid'] == undefined) {
             console.error('Parameter "classbook_localizationid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_localization_update_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbook_localizationid - integer, required (Localization id) 
       // * name - string, required (Article name) 
       // * content - string, required (The content of the article) 
        params = params || {};
        params.cmd = 'classbook_localization_update_record';
        if (params['classbook_localizationid'] == undefined) {
             console.error('Parameter "classbook_localizationid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['content'] == undefined) {
             console.error('Parameter "content" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_propasal_prepare_merge_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbook_proposal_id - integer, required (Proposal id) 
        params = params || {};
        params.cmd = 'classbook_propasal_prepare_merge_record';
        if (params['classbook_proposal_id'] == undefined) {
             console.error('Parameter "classbook_proposal_id" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_proposal_add_record = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (Classbookid for an article) 
       // * lang - string, required (Language) 
       // * name - string, required (Article name) 
       // * content - string, required (The content of the article) 
        params = params || {};
        params.cmd = 'classbook_proposal_add_record';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
        if (params['lang'] == undefined) {
             console.error('Parameter "lang" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['content'] == undefined) {
             console.error('Parameter "content" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_proposal_delete_record = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * classbook_proposal_id - integer, required (Proposal id) 
        params = params || {};
        params.cmd = 'classbook_proposal_delete_record';
        if (params['classbook_proposal_id'] == undefined) {
             console.error('Parameter "classbook_proposal_id" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_proposal_info = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * classbook_proposal_id - integer, required (Proposal id) 
        params = params || {};
        params.cmd = 'classbook_proposal_info';
        if (params['classbook_proposal_id'] == undefined) {
             console.error('Parameter "classbook_proposal_id" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_proposal_list = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (Classbookid for an article) 
       // * lang - string, optional (Language) 
        params = params || {};
        params.cmd = 'classbook_proposal_list';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
         return self.send(params);
    }

    self.classbook_update_record = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * classbookid - integer, required (id for classbook article) 
       // * name - string, optional (name for classbook article) 
       // * content - string, optional (content for classbook article) 
       // * ordered - integer, optional (ordered for classbook article) 
       // * parentid - integer, optional (parentid for classbook article) 
        params = params || {};
        params.cmd = 'classbook_update_record';
        if (params['classbookid'] == undefined) {
             console.error('Parameter "classbookid" expected (lib)');
        }
         return self.send(params);
    }

    self.createpublicevent = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * type - string, required (Type of event) 
       // * message - string, required (Message) 
        params = params || {};
        params.cmd = 'createpublicevent';
        if (params['type'] == undefined) {
             console.error('Parameter "type" expected (lib)');
        }
        if (params['message'] == undefined) {
             console.error('Parameter "message" expected (lib)');
        }
         return self.send(params);
    }

    self.createquest = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the quest) 
       // * gameid - integer, required (Which game included this quest) 
       // * name - string, required (Name of the quest) 
       // * text - string, required (Description of the quest) 
       // * score - integer, required (How much append to user score after solve quest by them) 
       // * author - string, required (Author of the quest) 
       // * subject - string, required (Subject must be one from types) 
       // * answer - string, required (Answer for the quest) 
       // * answer_format - string, required (Answer format for the quest) 
       // * state - string, required (State of the quest) 
       // * description_state - string, required (You can add some descriptions for quest state) 
       // * copyright - string, optional (You can add some copyright information) 
        params = params || {};
        params.cmd = 'createquest';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['gameid'] == undefined) {
             console.error('Parameter "gameid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['text'] == undefined) {
             console.error('Parameter "text" expected (lib)');
        }
        if (params['score'] == undefined) {
             console.error('Parameter "score" expected (lib)');
        }
        if (params['author'] == undefined) {
             console.error('Parameter "author" expected (lib)');
        }
        if (params['subject'] == undefined) {
             console.error('Parameter "subject" expected (lib)');
        }
        if (params['answer'] == undefined) {
             console.error('Parameter "answer" expected (lib)');
        }
        if (params['answer_format'] == undefined) {
             console.error('Parameter "answer_format" expected (lib)');
        }
        if (params['state'] == undefined) {
             console.error('Parameter "state" expected (lib)');
        }
        if (params['description_state'] == undefined) {
             console.error('Parameter "description_state" expected (lib)');
        }
         return self.send(params);
    }

    self.deletehint = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * hintid - integer, required (hint id) 
        params = params || {};
        params.cmd = 'deletehint';
        if (params['hintid'] == undefined) {
             console.error('Parameter "hintid" expected (lib)');
        }
         return self.send(params);
    }

    self.deletepublicevent = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * eventid - integer, required (Event ID) 
        params = params || {};
        params.cmd = 'deletepublicevent';
        if (params['eventid'] == undefined) {
             console.error('Parameter "eventid" expected (lib)');
        }
         return self.send(params);
    }

    self.feedback_add = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * from - string, required (From user) 
       // * text - string, required (Text of feedback) 
       // * type - string, required (Type of feedback) 
        params = params || {};
        params.cmd = 'feedback_add';
        if (params['from'] == undefined) {
             console.error('Parameter "from" expected (lib)');
        }
        if (params['text'] == undefined) {
             console.error('Parameter "text" expected (lib)');
        }
        if (params['type'] == undefined) {
             console.error('Parameter "type" expected (lib)');
        }
         return self.send(params);
    }

    self.game_create = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.0
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
       // * name - string, required (Name of the Game) 
       // * description - string, required (Description of the Game) 
       // * state - string, required (State of the game) 
       // * form - string, required (Form of the game) 
       // * type - string, required (Type of the game) 
       // * date_start - string, required (Date start) 
       // * date_stop - string, required (Date stop) 
       // * date_restart - string, required (Date restart) 
       // * organizators - string, required (Organizators) 
        params = params || {};
        params.cmd = 'game_create';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['description'] == undefined) {
             console.error('Parameter "description" expected (lib)');
        }
        if (params['state'] == undefined) {
             console.error('Parameter "state" expected (lib)');
        }
        if (params['form'] == undefined) {
             console.error('Parameter "form" expected (lib)');
        }
        if (params['type'] == undefined) {
             console.error('Parameter "type" expected (lib)');
        }
        if (params['date_start'] == undefined) {
             console.error('Parameter "date_start" expected (lib)');
        }
        if (params['date_stop'] == undefined) {
             console.error('Parameter "date_stop" expected (lib)');
        }
        if (params['date_restart'] == undefined) {
             console.error('Parameter "date_restart" expected (lib)');
        }
        if (params['organizators'] == undefined) {
             console.error('Parameter "organizators" expected (lib)');
        }
         return self.send(params);
    }

    self.game_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
       // * admin_password - string, required (Admin Password) 
        params = params || {};
        params.cmd = 'game_delete';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['admin_password'] == undefined) {
             console.error('Parameter "admin_password" expected (lib)');
        }
         return self.send(params);
    }

    self.game_export = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
        params = params || {};
        params.cmd = 'game_export';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
         return self.send(params);
    }

    self.game_import = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
        params = params || {};
        params.cmd = 'game_import';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
         return self.send(params);
    }

    self.game_info = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
        params = params || {};
        params.cmd = 'game_info';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
         return self.send(params);
    }

    self.game_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
       // * name - string, optional (Name of the Game) 
       // * description - string, optional (Description of the Game) 
       // * state - string, optional (State of the game) 
       // * form - string, optional (Form of the game) 
       // * type - string, optional (Type of the game) 
       // * date_start - string, optional (Date start) 
       // * date_stop - string, optional (Date stop) 
       // * date_restart - string, optional (Date restart) 
       // * organizators - string, optional (Organizators) 
        params = params || {};
        params.cmd = 'game_update';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
         return self.send(params);
    }

    self.game_update_logo = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (Global Identificator of the Game) 
       // * image_png_base64 - string, required (Image PNG in Base64) 
        params = params || {};
        params.cmd = 'game_update_logo';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['image_png_base64'] == undefined) {
             console.error('Parameter "image_png_base64" expected (lib)');
        }
         return self.send(params);
    }

    self.games = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'games';
         return self.send(params);
    }

    self.getmap = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'getmap';
         return self.send(params);
    }

    self.getpublicevent = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * eventid - integer, required (Event id) 
        params = params || {};
        params.cmd = 'getpublicevent';
        if (params['eventid'] == undefined) {
             console.error('Parameter "eventid" expected (lib)');
        }
         return self.send(params);
    }

    self.hints = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest id) 
        params = params || {};
        params.cmd = 'hints';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.leaks_add = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * uuid - string, required (UUID of the leak) 
       // * game_uuid - string, required (UUID of the game) 
       // * name - string, required (Visible part of the content) 
       // * content - string, required (Content of the leak) 
       // * score - integer, required (Price of the leak) 
        params = params || {};
        params.cmd = 'leaks_add';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['game_uuid'] == undefined) {
             console.error('Parameter "game_uuid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['content'] == undefined) {
             console.error('Parameter "content" expected (lib)');
        }
        if (params['score'] == undefined) {
             console.error('Parameter "score" expected (lib)');
        }
         return self.send(params);
    }

    self.leaks_buy = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: no
       // Input params:
       // * id - integer, required (Leak id) 
        params = params || {};
        params.cmd = 'leaks_buy';
        if (params['id'] == undefined) {
             console.error('Parameter "id" expected (lib)');
        }
         return self.send(params);
    }

    self.leaks_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * id - integer, required (Leak id) 
        params = params || {};
        params.cmd = 'leaks_delete';
        if (params['id'] == undefined) {
             console.error('Parameter "id" expected (lib)');
        }
         return self.send(params);
    }

    self.leaks_list = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * page - integer, required (Number of page) 
       // * onpage - integer, required (How much rows in one page) 
        params = params || {};
        params.cmd = 'leaks_list';
        if (params['page'] == undefined) {
             console.error('Parameter "page" expected (lib)');
        }
        if (params['onpage'] == undefined) {
             console.error('Parameter "onpage" expected (lib)');
        }
         return self.send(params);
    }

    self.leaks_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * id - integer, required (Leak id) 
       // * name - string, optional (Visible part of the content) 
       // * content - string, optional (Content of the leak) 
       // * score - integer, optional (Price of the leak) 
        params = params || {};
        params.cmd = 'leaks_update';
        if (params['id'] == undefined) {
             console.error('Parameter "id" expected (lib)');
        }
         return self.send(params);
    }

    self.login = function(params) {
       // Access unauthorized: yes
       // Access user: no
       // Access admin: no
       // Input params:
       // * email - string, required (E-mail) 
       // * password - string, required (Password) 
        params = params || {};
        params.cmd = 'login';
        if (params['email'] == undefined) {
             console.error('Parameter "email" expected (lib)');
        }
        if (params['password'] == undefined) {
             console.error('Parameter "password" expected (lib)');
        }
        var ret = self.promise()
        self.send(params).done(function(r) {
            _tokenValue = r.token;
            console.log(_tokenValue);
            self.userinfo = r.user;
            self.setToken(_tokenValue);
            self.updateUserProfileAsync();
            ret.resolve(r);
        }).fail(function(err) {
            self.removeToken();
            ret.reject(err);
        })
        return ret;
    }

    self.lxd_containers = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Container name) 
       // * action - string, required (Actions: create, start, stop and delete container) 
        params = params || {};
        params.cmd = 'lxd_containers';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['action'] == undefined) {
             console.error('Parameter "action" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_exec = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Container name) 
       // * command - string, required (Name of execution command) 
        params = params || {};
        params.cmd = 'lxd_exec';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['command'] == undefined) {
             console.error('Parameter "command" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_file = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Container name) 
       // * action - string, required (Action with files: pull, push or delete) 
       // * path - string, required (Path to file inside the container) 
        params = params || {};
        params.cmd = 'lxd_file';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['action'] == undefined) {
             console.error('Parameter "action" expected (lib)');
        }
        if (params['path'] == undefined) {
             console.error('Parameter "path" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_import_container = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * config - string, required (Container's configuration in json dumped string.) 
        params = params || {};
        params.cmd = 'lxd_import_container';
        if (params['config'] == undefined) {
             console.error('Parameter "config" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_import_service_from_zip = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * zip_file - string, required (Service's configuration in Base64 zip archive.) 
        params = params || {};
        params.cmd = 'lxd_import_service_from_zip';
        if (params['zip_file'] == undefined) {
             console.error('Parameter "zip_file" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_info = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Container name) 
       // * get - string, optional (Requested information) 
        params = params || {};
        params.cmd = 'lxd_info';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_list = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
        params = params || {};
        params.cmd = 'lxd_list';
         return self.send(params);
    }

    self.lxd_open_port = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Container name) 
       // * port - integer, required (Number container port) 
       // * protocol - string, required (Protocol) 
        params = params || {};
        params.cmd = 'lxd_open_port';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['port'] == undefined) {
             console.error('Parameter "port" expected (lib)');
        }
        if (params['protocol'] == undefined) {
             console.error('Parameter "protocol" expected (lib)');
        }
         return self.send(params);
    }

    self.lxd_start_service = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (Service's name.) 
        params = params || {};
        params.cmd = 'lxd_start_service';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
         return self.send(params);
    }

    self.mail_info = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
        params = params || {};
        params.cmd = 'mail_info';
         return self.send(params);
    }

    self.mail_send = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * to - string, required (E-mail of the recipient) 
       // * subject - string, required (Subject of the message) 
       // * body - string, required (Body of the message) 
        params = params || {};
        params.cmd = 'mail_send';
        if (params['to'] == undefined) {
             console.error('Parameter "to" expected (lib)');
        }
        if (params['subject'] == undefined) {
             console.error('Parameter "subject" expected (lib)');
        }
        if (params['body'] == undefined) {
             console.error('Parameter "body" expected (lib)');
        }
         return self.send(params);
    }

    self.mails_list = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * filter_email - string, optional (Filter by email) 
       // * filter_subject - string, optional (Filter by subject) 
       // * filter_message - string, optional (Filter by message) 
       // * onpage - integer, optional (On page) 
       // * page - integer, optional (page) 
        params = params || {};
        params.cmd = 'mails_list';
         return self.send(params);
    }

    self.public_info = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'public_info';
         return self.send(params);
    }

    self.publiceventslist = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * page - integer, required (Number of page) 
       // * onpage - integer, required (How much rows in one page) 
       // * type - string, optional (Filter by type events) 
       // * search - string, optional (Filter by message event) 
        params = params || {};
        params.cmd = 'publiceventslist';
        if (params['page'] == undefined) {
             console.error('Parameter "page" expected (lib)');
        }
        if (params['onpage'] == undefined) {
             console.error('Parameter "onpage" expected (lib)');
        }
         return self.send(params);
    }

    self.quest = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest ID) 
        params = params || {};
        params.cmd = 'quest';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.quest_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest ID) 
        params = params || {};
        params.cmd = 'quest_delete';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.quest_pass = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest ID) 
       // * answer - string, required (Answer) 
        params = params || {};
        params.cmd = 'quest_pass';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
        if (params['answer'] == undefined) {
             console.error('Parameter "answer" expected (lib)');
        }
         return self.send(params);
    }

    self.quest_proposal = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * gameid - integer, required (Which game included this quest) 
       // * name - string, required (Name of the quest) 
       // * text - string, required (Description of the quest) 
       // * score - integer, required (How much append to user score after solve quest by them) 
       // * author - string, required (Author of the quest) 
       // * subject - string, required (Subject must be one from types (look types)) 
       // * answer - string, required (Answer for the quest) 
       // * answer_format - string, required (Answer format for the quest) 
        params = params || {};
        params.cmd = 'quest_proposal';
        if (params['gameid'] == undefined) {
             console.error('Parameter "gameid" expected (lib)');
        }
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['text'] == undefined) {
             console.error('Parameter "text" expected (lib)');
        }
        if (params['score'] == undefined) {
             console.error('Parameter "score" expected (lib)');
        }
        if (params['author'] == undefined) {
             console.error('Parameter "author" expected (lib)');
        }
        if (params['subject'] == undefined) {
             console.error('Parameter "subject" expected (lib)');
        }
        if (params['answer'] == undefined) {
             console.error('Parameter "answer" expected (lib)');
        }
        if (params['answer_format'] == undefined) {
             console.error('Parameter "answer_format" expected (lib)');
        }
         return self.send(params);
    }

    self.quest_statistics = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest ID) 
        params = params || {};
        params.cmd = 'quest_statistics';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.quest_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * questid - integer, required (Quest ID) 
       // * name - string, optional (Name of the quest) 
       // * gameid - integer, optional (Which game included this quest) 
       // * text - string, optional (Description of the quest) 
       // * score - integer, optional (How much append to user score after solve quest by them) 
       // * subject - string, optional (Subject must be one from types) 
       // * author - string, optional (Author of the quest) 
       // * answer - string, optional (Answer for the quest) 
       // * answer_format - string, optional (Answer format for the quest) 
       // * state - string, optional (State of the quest) 
       // * description_state - string, optional (You can update some descriptions for quest state) 
       // * copyright - string, optional (You can update copyright) 
        params = params || {};
        params.cmd = 'quest_update';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.quests = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * subject - string, optional (Filter by subject) 
       // * filter - string, optional (Filter by some text) 
        params = params || {};
        params.cmd = 'quests';
         return self.send(params);
    }

    self.quests_proposal_list = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * onpage - integer, optional (On page) 
       // * page - integer, optional (page) 
        params = params || {};
        params.cmd = 'quests_proposal_list';
         return self.send(params);
    }

    self.quests_subjects = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'quests_subjects';
         return self.send(params);
    }

    self.quests_writeups_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.18
       // Input params:
       // * writeupid - integer, required (WriteUp ID) 
        params = params || {};
        params.cmd = 'quests_writeups_delete';
        if (params['writeupid'] == undefined) {
             console.error('Parameter "writeupid" expected (lib)');
        }
         return self.send(params);
    }

    self.quests_writeups_list = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.18
       // Input params:
       // * questid - integer, required (Quest ID) 
        params = params || {};
        params.cmd = 'quests_writeups_list';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
         return self.send(params);
    }

    self.quests_writeups_proposal = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.18
       // Input params:
       // * questid - integer, required (Quest ID) 
       // * writeup_link - string, required (Link to writeup (Must be start from https://www.youtube.com/watch?v=)) 
        params = params || {};
        params.cmd = 'quests_writeups_proposal';
        if (params['questid'] == undefined) {
             console.error('Parameter "questid" expected (lib)');
        }
        if (params['writeup_link'] == undefined) {
             console.error('Parameter "writeup_link" expected (lib)');
        }
         return self.send(params);
    }

    self.quests_writeups_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.18
       // Input params:
       // * writeupid - integer, required (WriteUp ID) 
       // * approve - string, required (Approve value 1 or 0) 
        params = params || {};
        params.cmd = 'quests_writeups_update';
        if (params['writeupid'] == undefined) {
             console.error('Parameter "writeupid" expected (lib)');
        }
        if (params['approve'] == undefined) {
             console.error('Parameter "approve" expected (lib)');
        }
         return self.send(params);
    }

    self.registration = function(params) {
       // Access unauthorized: yes
       // Access user: no
       // Access admin: no
       // Input params:
       // * email - string, required (E-mail) 
       // * university - string, required (University) 
        params = params || {};
        params.cmd = 'registration';
        if (params['email'] == undefined) {
             console.error('Parameter "email" expected (lib)');
        }
        if (params['university'] == undefined) {
             console.error('Parameter "university" expected (lib)');
        }
         return self.send(params);
    }

    self.scoreboard = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * page - integer, required (Number of page) 
       // * onpage - integer, required (How much rows in one page) 
        params = params || {};
        params.cmd = 'scoreboard';
        if (params['page'] == undefined) {
             console.error('Parameter "page" expected (lib)');
        }
        if (params['onpage'] == undefined) {
             console.error('Parameter "onpage" expected (lib)');
        }
         return self.send(params);
    }

    self.server_api = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
        params = params || {};
        params.cmd = 'server_api';
         return self.send(params);
    }

    self.server_info = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
        params = params || {};
        params.cmd = 'server_info';
         return self.send(params);
    }

    self.server_settings = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
        params = params || {};
        params.cmd = 'server_settings';
         return self.send(params);
    }

    self.server_settings_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * name - string, required (name of setting) 
       // * value - string, required (value of setting) 
        params = params || {};
        params.cmd = 'server_settings_update';
        if (params['name'] == undefined) {
             console.error('Parameter "name" expected (lib)');
        }
        if (params['value'] == undefined) {
             console.error('Parameter "value" expected (lib)');
        }
         return self.send(params);
    }

    self.token = function(params) {
       // Access unauthorized: yes
       // Access user: no
       // Access admin: no
       // Input params:
       // * token - string, required (Authorization token) 
        params = params || {};
        params.cmd = 'token';
        if (params['token'] == undefined) {
             console.error('Parameter "token" expected (lib)');
        }
         if (_tokenValue != '') {
             var ret = self.promise()
             params.token = _tokenValue;
             self.send(params).done(function(r) {
                 self.updateUserProfileAsync();
                 ret.resolve(r);
             }).fail(function(err) {
                 self.removeToken();
                 _call('userdata', {});
                 ret.reject(err);
             })
             return ret;
         } else {
             return self.send(params);
         }
    }

    self.updateuserlocation = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * userid - integer, required (User ID) 
        params = params || {};
        params.cmd = 'updateuserlocation';
        if (params['userid'] == undefined) {
             console.error('Parameter "userid" expected (lib)');
        }
         return self.send(params);
    }

    self.useful_links_add = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.21
       // Input params:
       // * url - string, required (URL) 
       // * description - string, required (Description) 
       // * author - string, required (Author) 
        params = params || {};
        params.cmd = 'useful_links_add';
        if (params['url'] == undefined) {
             console.error('Parameter "url" expected (lib)');
        }
        if (params['description'] == undefined) {
             console.error('Parameter "description" expected (lib)');
        }
        if (params['author'] == undefined) {
             console.error('Parameter "author" expected (lib)');
        }
         return self.send(params);
    }

    self.useful_links_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.21
       // Input params:
       // * url - string, required (URL) 
       // * description - string, required (Description) 
       // * author - string, required (Author) 
        params = params || {};
        params.cmd = 'useful_links_delete';
        if (params['url'] == undefined) {
             console.error('Parameter "url" expected (lib)');
        }
        if (params['description'] == undefined) {
             console.error('Parameter "description" expected (lib)');
        }
        if (params['author'] == undefined) {
             console.error('Parameter "author" expected (lib)');
        }
         return self.send(params);
    }

    self.useful_links_list = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.21
       // Input params:
       // * filter - string, optional (Filter by word) 
        params = params || {};
        params.cmd = 'useful_links_list';
         return self.send(params);
    }

    self.useful_links_star = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.21
        params = params || {};
        params.cmd = 'useful_links_star';
         return self.send(params);
    }

    self.useful_links_unstar = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.21
        params = params || {};
        params.cmd = 'useful_links_unstar';
         return self.send(params);
    }

    self.useful_links_update = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.21
       // Input params:
       // * url - string, required (URL) 
       // * description - string, required (Description) 
       // * author - string, required (Author) 
       // * status - string, required (Status) 
        params = params || {};
        params.cmd = 'useful_links_update';
        if (params['url'] == undefined) {
             console.error('Parameter "url" expected (lib)');
        }
        if (params['description'] == undefined) {
             console.error('Parameter "description" expected (lib)');
        }
        if (params['author'] == undefined) {
             console.error('Parameter "author" expected (lib)');
        }
        if (params['status'] == undefined) {
             console.error('Parameter "status" expected (lib)');
        }
         return self.send(params);
    }

    self.user = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Deprecated From Version: 0.2.17
       // Input params:
       // * userid - integer, optional (Id of user) 
        params = params || {};
        params.cmd = 'user';
         return self.send(params);
    }

    self.user_change_password = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * password_old - string, required (Old password) 
       // * password_new - string, required (New password) 
        params = params || {};
        params.cmd = 'user_change_password';
        if (params['password_old'] == undefined) {
             console.error('Parameter "password_old" expected (lib)');
        }
        if (params['password_new'] == undefined) {
             console.error('Parameter "password_new" expected (lib)');
        }
         return self.send(params);
    }

    self.user_delete = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * userid - integer, required (User's id) 
       // * password - string, required (Admin's password) 
        params = params || {};
        params.cmd = 'user_delete';
        if (params['userid'] == undefined) {
             console.error('Parameter "userid" expected (lib)');
        }
        if (params['password'] == undefined) {
             console.error('Parameter "password" expected (lib)');
        }
         return self.send(params);
    }

    self.user_reset_password = function(params) {
       // Access unauthorized: yes
       // Access user: no
       // Access admin: no
       // Input params:
       // * email - string, required (E-mail) 
        params = params || {};
        params.cmd = 'user_reset_password';
        if (params['email'] == undefined) {
             console.error('Parameter "email" expected (lib)');
        }
         return self.send(params);
    }

    self.user_skills = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * userid - integer, required (Id of user) 
        params = params || {};
        params.cmd = 'user_skills';
        if (params['userid'] == undefined) {
             console.error('Parameter "userid" expected (lib)');
        }
         return self.send(params);
    }

    self.user_update = function(params) {
       // Access unauthorized: no
       // Access user: yes
       // Access admin: yes
       // Input params:
       // * userid - integer, required (Id of user) 
       // * nick - string, optional (Nick of user) 
       // * university - string, optional (University of user) 
       // * about - string, optional (About of user) 
       // * country - string, optional (Country of user) 
        params = params || {};
        params.cmd = 'user_update';
        if (params['userid'] == undefined) {
             console.error('Parameter "userid" expected (lib)');
        }
         return self.send(params);
    }

    self.users = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Input params:
       // * filter_text - string, optional (Filter by user email or nick) 
       // * filter_role - string, optional (Filter by user role) 
       // * onpage - integer, optional (On Page) 
       // * page - integer, optional (Number of page) 
        params = params || {};
        params.cmd = 'users';
         return self.send(params);
    }

    self.users_add = function(params) {
       // Access unauthorized: no
       // Access user: no
       // Access admin: yes
       // Activated From Version: 0.2.17
       // Input params:
       // * uuid - string, required (User's Global Unique Identifier) 
       // * email - string, required (User's E-mail) 
       // * nick - string, required (User's nick) 
       // * password - string, required (Password) 
       // * role - string, required (User's role) 
       // * university - string, optional (University) 
        params = params || {};
        params.cmd = 'users_add';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
        if (params['email'] == undefined) {
             console.error('Parameter "email" expected (lib)');
        }
        if (params['nick'] == undefined) {
             console.error('Parameter "nick" expected (lib)');
        }
        if (params['password'] == undefined) {
             console.error('Parameter "password" expected (lib)');
        }
        if (params['role'] == undefined) {
             console.error('Parameter "role" expected (lib)');
        }
         return self.send(params);
    }

    self.users_info = function(params) {
       // Access unauthorized: yes
       // Access user: yes
       // Access admin: yes
       // Activated From Version: 0.2.17
       // Input params:
       // * uuid - integer, required (Global unique identify of user) 
        params = params || {};
        params.cmd = 'users_info';
        if (params['uuid'] == undefined) {
             console.error('Parameter "uuid" expected (lib)');
        }
         return self.send(params);
    }

    return self;
})();
