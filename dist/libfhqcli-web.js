// This file was automatically generated by fhq-server 
// Version: 0.2.18
// Date: 03 Feb 2019 

if (!window.fhq) window.fhq = {};
if (!window.fhq.ws) window.fhq.ws = {};
fhq.ws.lastm = 0;

// WebSocket protocol

window.fhq.ws.handlerReceivedChatMessage = function(response){
	fhq.handlerReceivedChatMessage(response);
};
window.fhq.ws.listeners = {}
window.fhq.ws.addListener = function(m, d) {
	fhq.ws.listeners[m] = d;
}

fhq.ws.handleCommand = function(response) {
	if (fhq.ws.listeners[response.m]) {
		if (response['error']) {
			setTimeout(function(){
				fhq.ws.listeners[response.m].reject(response);
				delete fhq.ws.listeners[response.m];
			},1);
		} else {
			setTimeout(function(){
				fhq.ws.listeners[response.m].resolve(response);
				delete fhq.ws.listeners[response.m];
			},1);
		}
	} else if(response.cmd === 'server') {
		console.warn('App: ' + response.app);
		console.warn('Version: ' + response.version);
		console.warn('All: ', response);
	} else if(response.cmd === 'notify') {
        fhq.ui.showNotification(response.type, response.section, response.message);
	} else if(response.cmd === 'chat') {
		fhq.ws.handlerReceivedChatMessage(response);
	} else {
		console.error('Not found handler for [' + response.cmd + '/' + response.m + ']');
	}
};

window.fhq.ws.WSState = '?';

window.fhq.ws.getWSState = function(){
	return fhq.ws.WSState;
}

window.fhq.ws.setWSState = function(s){
	fhq.ws.WSState = s;
	var el = document.getElementById('websocket_state');
	if(el){
		document.getElementById('websocket_state').innerHTML = s;
	}
}
window.fhq.ws.onconnect = function(){
	
};

window.fhq.ws.initWebsocket = function(){

	fhq.ws.socket = new WebSocket(fhq.ws.base_url);
	window.fhq.ws.socket.onopen = function() {
		console.log('WS Opened');
		setTimeout(window.fhq.ws.onconnect,1);
		fhq.ws.setWSState('OK');
		fhq.ws.token();
	};

	window.fhq.ws.socket.onclose = function(event) {
		console.log('Closed');
		
		if(fhq.ui && fhq.ui.onwsclose){
			fhq.ui.onwsclose();
		}
		
		if (event.wasClean) {
			fhq.ws.setWSState('CLOSED');
		} else {
			fhq.ws.setWSState('BROKEN');
			setTimeout(function(){
				fhq.ws.setWSState('RECONN');
				fhq.ws.initWebsocket();
			}, 10000);
		  // Try reconnect after 5 sec
		}
		console.log('Code: ' + event.code + ' Reason: ' + event.reason);
	};
	fhq.ws.socket.onmessage = function(event) {
		// console.log('Received: ' + event.data);
		try{
			var response = JSON.parse(event.data);
			fhq.ws.handleCommand(response);
		}catch(e){
			console.error(e);
		}
		
	};
	fhq.ws.socket.onerror = function(error) {
		console.log('Error: ' + error.message);
	};
}

fhq.ws.initWebsocket();

window.fhq.ws.send = function(obj, def){
	var d = def || $.Deferred();
	fhq.ws.lastm++;
	obj.m = 'm' + fhq.ws.lastm;
	fhq.ws.listeners[obj.m] = d;
	try{
		if(fhq.ws.socket.readyState == 0){
			setTimeout(function(){
				fhq.ws.send(obj, d);
			},1000);
		}else{
			// console.log('ReadyState ' + fhq.ws.socket.readyState);
			// console.log('Send ' + JSON.stringify(obj));
			fhq.ws.socket.send(JSON.stringify(obj));
		}
	}catch(e){
		console.error(e);
	}
	return d;
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * questid - integer, required (quest id) 
// * hint - string, required (hint text) 
fhq.ws.addhint = function(params) {
    params = params || {};
    params.cmd = 'addhint';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    if (!params['hint']) {
         console.error('Parameter "hint" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * page - integer, required (Number of page) 
// * onpage - integer, required (How much rows on page) 
// * questid - integer, optional (Filter for questid) 
// * userid - integer, optional (Filter for userid) 
fhq.ws.answerlist = function(params) {
    params = params || {};
    params.cmd = 'answerlist';
    if (!params['page']) {
         console.error('Parameter "page" expected (lib)');
    }
    if (!params['onpage']) {
         console.error('Parameter "onpage" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * parentid - integer, required (pareintid for classbook article) 
// * name - string, required (name of article) 
// * content - string, required (content of article) 
// * uuid - uuid, optional (uuid of article) 
// * ordered - integer, optional (order of article) 
fhq.ws.classbook_add_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_add_record';
    if (!params['parentid']) {
         console.error('Parameter "parentid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['content']) {
         console.error('Parameter "content" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbookid - integer, required (id for classbook article) 
fhq.ws.classbook_delete_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_delete_record';
    if (!params['classbookid']) {
         console.error('Parameter "classbookid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * output - string, required (The output file format) 
// * lang - string, required (The output file format) 
// * zip - boolean, optional (Zipping the output) 
fhq.ws.classbook_export = function(params) {
    params = params || {};
    params.cmd = 'classbook_export';
    if (!params['output']) {
         console.error('Parameter "output" expected (lib)');
    }
    if (!params['lang']) {
         console.error('Parameter "lang" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * classbookid - integer, required (id for the classbook article) 
// * lang - string, optional (Set lang for the article) 
fhq.ws.classbook_info = function(params) {
    params = params || {};
    params.cmd = 'classbook_info';
    if (!params['classbookid']) {
         console.error('Parameter "classbookid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * parentid - integer, required (parentid for classbook articles) 
// * lang - string, optional (lang for classbook articles) 
// * search - string, optional (Search string for classbook articles) 
fhq.ws.classbook_list = function(params) {
    params = params || {};
    params.cmd = 'classbook_list';
    if (!params['parentid']) {
         console.error('Parameter "parentid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbookid - integer, required (Classbookid for article localization) 
// * lang - string, required (Language) 
// * name - string, required (Article name) 
// * content - string, required (The content of the article) 
fhq.ws.classbook_localization_add_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_localization_add_record';
    if (!params['classbookid']) {
         console.error('Parameter "classbookid" expected (lib)');
    }
    if (!params['lang']) {
         console.error('Parameter "lang" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['content']) {
         console.error('Parameter "content" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbook_localizationid - integer, required (Localization id) 
fhq.ws.classbook_localization_delete_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_localization_delete_record';
    if (!params['classbook_localizationid']) {
         console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbook_localizationid - integer, required (Localization id) 
fhq.ws.classbook_localization_info = function(params) {
    params = params || {};
    params.cmd = 'classbook_localization_info';
    if (!params['classbook_localizationid']) {
         console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbook_localizationid - integer, required (Localization id) 
// * name - string, required (Article name) 
// * content - string, required (The content of the article) 
fhq.ws.classbook_localization_update_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_localization_update_record';
    if (!params['classbook_localizationid']) {
         console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['content']) {
         console.error('Parameter "content" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbook_proposal_id - integer, required (Proposal id) 
fhq.ws.classbook_propasal_prepare_merge_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_propasal_prepare_merge_record';
    if (!params['classbook_proposal_id']) {
         console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * classbookid - integer, required (Classbookid for an article) 
// * lang - string, required (Language) 
// * name - string, required (Article name) 
// * content - string, required (The content of the article) 
fhq.ws.classbook_proposal_add_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_proposal_add_record';
    if (!params['classbookid']) {
         console.error('Parameter "classbookid" expected (lib)');
    }
    if (!params['lang']) {
         console.error('Parameter "lang" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['content']) {
         console.error('Parameter "content" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * classbook_proposal_id - integer, required (Proposal id) 
fhq.ws.classbook_proposal_delete_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_proposal_delete_record';
    if (!params['classbook_proposal_id']) {
         console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * classbook_proposal_id - integer, required (Proposal id) 
fhq.ws.classbook_proposal_info = function(params) {
    params = params || {};
    params.cmd = 'classbook_proposal_info';
    if (!params['classbook_proposal_id']) {
         console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * classbookid - integer, optional (Classbookid for an article) 
// * lang - string, optional (Language) 
fhq.ws.classbook_proposal_list = function(params) {
    params = params || {};
    params.cmd = 'classbook_proposal_list';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * classbookid - integer, required (id for classbook article) 
// * name - string, optional (name for classbook article) 
// * content - string, optional (content for classbook article) 
// * ordered - integer, optional (ordered for classbook article) 
// * parentid - integer, optional (parentid for classbook article) 
fhq.ws.classbook_update_record = function(params) {
    params = params || {};
    params.cmd = 'classbook_update_record';
    if (!params['classbookid']) {
         console.error('Parameter "classbookid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * type - enum, required () 
// * message - string, required () 
fhq.ws.createpublicevent = function(params) {
    params = params || {};
    params.cmd = 'createpublicevent';
    if (!params['type']) {
         console.error('Parameter "type" expected (lib)');
    }
    if (!params['message']) {
         console.error('Parameter "message" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the quest) 
// * gameid - integer, required (Which game included this quest) 
// * name - string, required (Name of the quest) 
// * text - string, required (Description of the quest) 
// * score - integer, required (How much append to user score after solve quest by them) 
// * author - string, required (Author of the quest) 
// * subject - string, required (Subject must be one from types (look types)) 
// * answer - string, required (Answer for the quest) 
// * answer_format - string, required (Answer format for the quest) 
// * state - string, required (State of the quest, can be: open, broken, closed) 
// * description_state - string, required (You can add some descriptions for quest state) 
fhq.ws.createquest = function(params) {
    params = params || {};
    params.cmd = 'createquest';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    if (!params['gameid']) {
         console.error('Parameter "gameid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['text']) {
         console.error('Parameter "text" expected (lib)');
    }
    if (!params['score']) {
         console.error('Parameter "score" expected (lib)');
    }
    if (!params['author']) {
         console.error('Parameter "author" expected (lib)');
    }
    if (!params['subject']) {
         console.error('Parameter "subject" expected (lib)');
    }
    if (!params['answer']) {
         console.error('Parameter "answer" expected (lib)');
    }
    if (!params['answer_format']) {
         console.error('Parameter "answer_format" expected (lib)');
    }
    if (!params['state']) {
         console.error('Parameter "state" expected (lib)');
    }
    if (!params['description_state']) {
         console.error('Parameter "description_state" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * hintid - integer, required (hint id) 
fhq.ws.deletehint = function(params) {
    params = params || {};
    params.cmd = 'deletehint';
    if (!params['hintid']) {
         console.error('Parameter "hintid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * hintid - integer, required (hint id) 
fhq.ws.deletepublicevent = function(params) {
    params = params || {};
    params.cmd = 'deletepublicevent';
    if (!params['hintid']) {
         console.error('Parameter "hintid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * from - email, required (From user) 
// * text - string, required (Text of feedback) 
// * type - string, required (Type) 
fhq.ws.feedback_add = function(params) {
    params = params || {};
    params.cmd = 'feedback_add';
    if (!params['from']) {
         console.error('Parameter "from" expected (lib)');
    }
    if (!params['text']) {
         console.error('Parameter "text" expected (lib)');
    }
    if (!params['type']) {
         console.error('Parameter "type" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
// * name - string, required (Name of the Game) 
// * description - string, required (Description of the Game) 
// * state - string, required (State of the game) 
// * form - string, required (Form of the game) 
// * type - string, required (Type of the game) 
// * date_start - string, required (Date start) 
// * date_stop - string, required (Date stop) 
// * date_restart - string, required (Date restart) 
// * organizators - string, required (Organizators) 
fhq.ws.game_create = function(params) {
    params = params || {};
    params.cmd = 'game_create';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['description']) {
         console.error('Parameter "description" expected (lib)');
    }
    if (!params['state']) {
         console.error('Parameter "state" expected (lib)');
    }
    if (!params['form']) {
         console.error('Parameter "form" expected (lib)');
    }
    if (!params['type']) {
         console.error('Parameter "type" expected (lib)');
    }
    if (!params['date_start']) {
         console.error('Parameter "date_start" expected (lib)');
    }
    if (!params['date_stop']) {
         console.error('Parameter "date_stop" expected (lib)');
    }
    if (!params['date_restart']) {
         console.error('Parameter "date_restart" expected (lib)');
    }
    if (!params['organizators']) {
         console.error('Parameter "organizators" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
// * admin_password - string, required (Admin Password) 
fhq.ws.game_delete = function(params) {
    params = params || {};
    params.cmd = 'game_delete';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    if (!params['admin_password']) {
         console.error('Parameter "admin_password" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
fhq.ws.game_export = function(params) {
    params = params || {};
    params.cmd = 'game_export';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
fhq.ws.game_import = function(params) {
    params = params || {};
    params.cmd = 'game_import';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
fhq.ws.game_info = function(params) {
    params = params || {};
    params.cmd = 'game_info';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
// * name - string, optional (Name of the Game) 
// * description - string, optional (Description of the Game) 
// * state - string, optional (State of the game) 
// * form - string, optional (Form of the game) 
// * type - string, optional (Type of the game) 
// * date_start - string, optional (Date start) 
// * date_stop - string, optional (Date stop) 
// * date_restart - string, optional (Date restart) 
// * organizators - string, optional (Organizators) 
fhq.ws.game_update = function(params) {
    params = params || {};
    params.cmd = 'game_update';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (Global Identificator of the Game) 
// * image_png_base64 - string, required (Image PNG in Base64) 
fhq.ws.game_update_logo = function(params) {
    params = params || {};
    params.cmd = 'game_update_logo';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    if (!params['image_png_base64']) {
         console.error('Parameter "image_png_base64" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.games = function(params) {
    params = params || {};
    params.cmd = 'games';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.getmap = function(params) {
    params = params || {};
    params.cmd = 'getmap';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * eventid - integer, required (Event id) 
fhq.ws.getpublicevent = function(params) {
    params = params || {};
    params.cmd = 'getpublicevent';
    if (!params['eventid']) {
         console.error('Parameter "eventid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * questid - integer, required (Quest id) 
fhq.ws.hints = function(params) {
    params = params || {};
    params.cmd = 'hints';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * uuid - uuid, required (UUID of the leak) 
// * game_uuid - uuid, required (UUID of the game) 
// * name - string, required (Visible part of the content) 
// * content - string, required (Content of the leak) 
// * score - integer, required (Price of the leak) 
fhq.ws.leaks_add = function(params) {
    params = params || {};
    params.cmd = 'leaks_add';
    if (!params['uuid']) {
         console.error('Parameter "uuid" expected (lib)');
    }
    if (!params['game_uuid']) {
         console.error('Parameter "game_uuid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['content']) {
         console.error('Parameter "content" expected (lib)');
    }
    if (!params['score']) {
         console.error('Parameter "score" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: no
// Input params:
// * id - integer, required (Leak id) 
fhq.ws.leaks_buy = function(params) {
    params = params || {};
    params.cmd = 'leaks_buy';
    if (!params['id']) {
         console.error('Parameter "id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * id - integer, required (Leak id) 
fhq.ws.leaks_delete = function(params) {
    params = params || {};
    params.cmd = 'leaks_delete';
    if (!params['id']) {
         console.error('Parameter "id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * page - integer, required (Number of page) 
// * onpage - integer, required (How much rows in one page) 
fhq.ws.leaks_list = function(params) {
    params = params || {};
    params.cmd = 'leaks_list';
    if (!params['page']) {
         console.error('Parameter "page" expected (lib)');
    }
    if (!params['onpage']) {
         console.error('Parameter "onpage" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * id - integer, required (Leak id) 
// * name - string, optional (Visible part of the content) 
// * content - string, optional (Content of the leak) 
// * score - integer, optional (Price of the leak) 
fhq.ws.leaks_update = function(params) {
    params = params || {};
    params.cmd = 'leaks_update';
    if (!params['id']) {
         console.error('Parameter "id" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: no
// Access admin: no
// Input params:
// * email - string, required (E-mail) 
// * password - string, required (Password) 
fhq.ws.login = function(params) {
    params = params || {};
    params.cmd = 'login';
    if (!params['email']) {
         console.error('Parameter "email" expected (lib)');
    }
    if (!params['password']) {
         console.error('Parameter "password" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * name - string, required (Container name) 
// * action - string, required (Actions: create, start, stop and delete container) 
fhq.ws.lxd_containers = function(params) {
    params = params || {};
    params.cmd = 'lxd_containers';
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['action']) {
         console.error('Parameter "action" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: no
// Access admin: yes
// Input params:
// * name - string, required (Container name) 
// * get - string, optional (Requested information) 
fhq.ws.lxd_info = function(params) {
    params = params || {};
    params.cmd = 'lxd_info';
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
fhq.ws.lxd_list = function(params) {
    params = params || {};
    params.cmd = 'lxd_list';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
fhq.ws.mail_info = function(params) {
    params = params || {};
    params.cmd = 'mail_info';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * to - email, required (E-mail of the recipient) 
// * subject - string, required (Subject of the message) 
// * body - string, required (Body of the message) 
fhq.ws.mail_send = function(params) {
    params = params || {};
    params.cmd = 'mail_send';
    if (!params['to']) {
         console.error('Parameter "to" expected (lib)');
    }
    if (!params['subject']) {
         console.error('Parameter "subject" expected (lib)');
    }
    if (!params['body']) {
         console.error('Parameter "body" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * filter_email - string, optional (Filter by email) 
// * filter_subject - string, optional (Filter by subject) 
// * filter_message - string, optional (Filter by message) 
// * onpage - integer, optional (On page) 
// * page - integer, optional (page) 
fhq.ws.mails_list = function(params) {
    params = params || {};
    params.cmd = 'mails_list';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.public_info = function(params) {
    params = params || {};
    params.cmd = 'public_info';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * page - integer, required (Number of page) 
// * onpage - integer, required (How much rows in one page) 
fhq.ws.publiceventslist = function(params) {
    params = params || {};
    params.cmd = 'publiceventslist';
    if (!params['page']) {
         console.error('Parameter "page" expected (lib)');
    }
    if (!params['onpage']) {
         console.error('Parameter "onpage" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * questid - integer, required (Quest ID) 
fhq.ws.quest = function(params) {
    params = params || {};
    params.cmd = 'quest';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * questid - integer, required (Quest ID) 
fhq.ws.quest_delete = function(params) {
    params = params || {};
    params.cmd = 'quest_delete';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * questid - integer, required (Quest ID) 
// * answer - string, required (Answer) 
fhq.ws.quest_pass = function(params) {
    params = params || {};
    params.cmd = 'quest_pass';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    if (!params['answer']) {
         console.error('Parameter "answer" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * gameid - integer, required (Which game included this quest) 
// * name - string, required (Name of the quest) 
// * text - string, required (Description of the quest) 
// * score - integer, required (How much append to user score after solve quest by them) 
// * author - string, required (Author of the quest) 
// * subject - string, required (Subject must be one from types (look types)) 
// * answer - string, required (Answer for the quest) 
// * answer_format - string, required (Answer format for the quest) 
fhq.ws.quest_proposal = function(params) {
    params = params || {};
    params.cmd = 'quest_proposal';
    if (!params['gameid']) {
         console.error('Parameter "gameid" expected (lib)');
    }
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['text']) {
         console.error('Parameter "text" expected (lib)');
    }
    if (!params['score']) {
         console.error('Parameter "score" expected (lib)');
    }
    if (!params['author']) {
         console.error('Parameter "author" expected (lib)');
    }
    if (!params['subject']) {
         console.error('Parameter "subject" expected (lib)');
    }
    if (!params['answer']) {
         console.error('Parameter "answer" expected (lib)');
    }
    if (!params['answer_format']) {
         console.error('Parameter "answer_format" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * questid - integer, required (Quest ID) 
fhq.ws.quest_statistics = function(params) {
    params = params || {};
    params.cmd = 'quest_statistics';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * questid - integer, required (Quest ID) 
// * name - string, optional (Name of the quest) 
// * gameid - integer, optional (Which game included this quest) 
// * text - string, optional (Description of the quest) 
// * score - integer, optional (How much append to user score after solve quest by them) 
// * subject - string, optional (Subject must be one from types (look types)) 
// * answer - string, optional (Answer for the quest) 
// * answer_format - string, optional (Answer format for the quest) 
// * state - string, optional (State of the quest, can be: open, broken, closed) 
// * description_state - string, optional (You can add some descriptions for quest state) 
fhq.ws.quest_update = function(params) {
    params = params || {};
    params.cmd = 'quest_update';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * subject - string, optional (Filter by subject) 
fhq.ws.quests = function(params) {
    params = params || {};
    params.cmd = 'quests';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * onpage - integer, optional (On page) 
// * page - integer, optional (page) 
fhq.ws.quests_proposal_list = function(params) {
    params = params || {};
    params.cmd = 'quests_proposal_list';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.quests_subjects = function(params) {
    params = params || {};
    params.cmd = 'quests_subjects';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Activated From Version: 0.2.18
// Input params:
// * writeupid - integer, required (WriteUp ID) 
fhq.ws.quests_writeups_delete = function(params) {
    params = params || {};
    params.cmd = 'quests_writeups_delete';
    if (!params['writeupid']) {
         console.error('Parameter "writeupid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Activated From Version: 0.2.18
// Input params:
// * questid - integer, required (Quest ID) 
fhq.ws.quests_writeups_list = function(params) {
    params = params || {};
    params.cmd = 'quests_writeups_list';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Activated From Version: 0.2.18
// Input params:
// * questid - integer, required (Quest ID) 
// * writeup_link - string, required (Link to writeup (Must be start from https://www.youtube.com/watch?v=)) 
fhq.ws.quests_writeups_proposal = function(params) {
    params = params || {};
    params.cmd = 'quests_writeups_proposal';
    if (!params['questid']) {
         console.error('Parameter "questid" expected (lib)');
    }
    if (!params['writeup_link']) {
         console.error('Parameter "writeup_link" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Activated From Version: 0.2.18
// Input params:
// * writeupid - integer, required (WriteUp ID) 
// * approve - string, required (Approve value 1 or 0) 
fhq.ws.quests_writeups_update = function(params) {
    params = params || {};
    params.cmd = 'quests_writeups_update';
    if (!params['writeupid']) {
         console.error('Parameter "writeupid" expected (lib)');
    }
    if (!params['approve']) {
         console.error('Parameter "approve" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: no
// Access admin: no
// Input params:
// * email - email, required (E-mail) 
// * university - string, required (University) 
fhq.ws.registration = function(params) {
    params = params || {};
    params.cmd = 'registration';
    if (!params['email']) {
         console.error('Parameter "email" expected (lib)');
    }
    if (!params['university']) {
         console.error('Parameter "university" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * page - integer, required (Number of page) 
// * onpage - integer, required (How much rows in one page) 
fhq.ws.scoreboard = function(params) {
    params = params || {};
    params.cmd = 'scoreboard';
    if (!params['page']) {
         console.error('Parameter "page" expected (lib)');
    }
    if (!params['onpage']) {
         console.error('Parameter "onpage" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.sendchatmessage = function(params) {
    params = params || {};
    params.cmd = 'sendchatmessage';
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
fhq.ws.server_api = function(params) {
    params = params || {};
    params.cmd = 'server_api';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
fhq.ws.server_info = function(params) {
    params = params || {};
    params.cmd = 'server_info';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
fhq.ws.server_settings = function(params) {
    params = params || {};
    params.cmd = 'server_settings';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * name - string, required (name of setting) 
// * value - any, required (value of setting) 
fhq.ws.server_settings_update = function(params) {
    params = params || {};
    params.cmd = 'server_settings_update';
    if (!params['name']) {
         console.error('Parameter "name" expected (lib)');
    }
    if (!params['value']) {
         console.error('Parameter "value" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: no
// Access admin: no
// Input params:
// * token - string, optional (Auth token) 
fhq.ws.token = function(params) {
    params = params || {};
    params.cmd = 'token';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * userid - integer, required (User ID) 
fhq.ws.updateuserlocation = function(params) {
    params = params || {};
    params.cmd = 'updateuserlocation';
    if (!params['userid']) {
         console.error('Parameter "userid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Deprecated From Version: 0.2.17
// Input params:
// * userid - integer, optional (Id of user) 
fhq.ws.user = function(params) {
    params = params || {};
    params.cmd = 'user';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * password_old - string, required (Old password) 
// * password_new - string, required (New password) 
fhq.ws.user_change_password = function(params) {
    params = params || {};
    params.cmd = 'user_change_password';
    if (!params['password_old']) {
         console.error('Parameter "password_old" expected (lib)');
    }
    if (!params['password_new']) {
         console.error('Parameter "password_new" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * userid - integer, required (User's id) 
// * password - string, required (Admin's password) 
fhq.ws.user_delete = function(params) {
    params = params || {};
    params.cmd = 'user_delete';
    if (!params['userid']) {
         console.error('Parameter "userid" expected (lib)');
    }
    if (!params['password']) {
         console.error('Parameter "password" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: no
// Access admin: no
// Input params:
// * email - email, required (E-mail) 
fhq.ws.user_reset_password = function(params) {
    params = params || {};
    params.cmd = 'user_reset_password';
    if (!params['email']) {
         console.error('Parameter "email" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Input params:
// * userid - integer, required (Id of user) 
fhq.ws.user_skills = function(params) {
    params = params || {};
    params.cmd = 'user_skills';
    if (!params['userid']) {
         console.error('Parameter "userid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: yes
// Access admin: yes
// Input params:
// * userid - integer, required (Id of user) 
// * nick - string, optional (Nick of user) 
// * university - string, optional (University of user) 
// * about - string, optional (About of user) 
fhq.ws.user_update = function(params) {
    params = params || {};
    params.cmd = 'user_update';
    if (!params['userid']) {
         console.error('Parameter "userid" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Input params:
// * filter_text - string, optional (Filter by user email or nick) 
// * filter_role - string, optional (Filter by user role) 
// * onpage - integer, optional (On page) 
// * page - integer, optional (page) 
fhq.ws.users = function(params) {
    params = params || {};
    params.cmd = 'users';
    return fhq.ws.send(params);
}

// Access unauthorized: no
// Access user: no
// Access admin: yes
// Activated From Version: 0.2.17
// Input params:
// * uuid - uuid, optional (User's Global Unique Identifier) 
// * email - string, required (User's E-mail) 
// * nick - string, required (User's nick) 
// * password - string, required (Password) 
// * role - string, required (User's role) 
// * university - string, optional (University) 
fhq.ws.users_add = function(params) {
    params = params || {};
    params.cmd = 'users_add';
    if (!params['email']) {
         console.error('Parameter "email" expected (lib)');
    }
    if (!params['nick']) {
         console.error('Parameter "nick" expected (lib)');
    }
    if (!params['password']) {
         console.error('Parameter "password" expected (lib)');
    }
    if (!params['role']) {
         console.error('Parameter "role" expected (lib)');
    }
    return fhq.ws.send(params);
}

// Access unauthorized: yes
// Access user: yes
// Access admin: yes
// Activated From Version: 0.2.17
// Input params:
// * uuid - integer, optional (Global unique identify of user) 
fhq.ws.users_info = function(params) {
    params = params || {};
    params.cmd = 'users_info';
    return fhq.ws.send(params);
}

